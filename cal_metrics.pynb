{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'hydro_metrics'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mxarray\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mxr\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mhydro_metrics\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mhym\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'hydro_metrics'"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "import hydro_metrics as hym\n",
    "from scipy.stats import gaussian_kde\n",
    "import numpy as np\n",
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#wrf\n",
    "#\n",
    "points_wrf=xr.open_dataset(filepath+'\\d04_raw_2018-wrf.nc')\n",
    "\n",
    "points_nosa_predwrf=xr.open_dataset(filepath+'\\d04_nosa_2018-wrf.nc')\n",
    "points_sa_predwrf=xr.open_dataset(filepath+'\\d04_sa_2018-wrf.nc')\n",
    "\n",
    "#gpm\n",
    "points_gpm=xr.open_dataset(filepath+'\\d04_raw_2018-gpm.nc')\n",
    "points_nosa_predgpm=xr.open_dataset(filepath+'\\d04_nosa_2018-gpm.nc')\n",
    "points_sa_predgpm=xr.open_dataset(filepath+'\\d04_sa_2018-gpm.nc')\n",
    "\n",
    "#era5\n",
    "points_era5=xr.open_dataset(filepath+'\\d04_raw_2018-era5.nc')\n",
    "points_nosa_predera5=xr.open_dataset(filepath+'\\d04_nosa_2018-era5.nc')\n",
    "points_sa_predera5=xr.open_dataset(filepath+'\\d04_sa_2018-era5.nc')\n",
    "\n",
    "#gauge\n",
    "ds_gauge=xr.open_dataset(filepath+'\\d04_rain_gauge.nc')\n",
    "ds_gauge=ds_gauge.sel(time=slice('2018-06-01T00:00:00','2018-09-30T23:00:00'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def xr_to_1d(obs,sim):\n",
    "    ts=0\n",
    "    obs_1d=obs.tp.values.reshape(-1).squeeze()\n",
    "    # Find non-empty values in A\n",
    "    mask = obs_1d>=ts\n",
    "\n",
    "    obs_1d=obs_1d[mask]\n",
    "\n",
    "    sim_1d=sim.tp.values.reshape(-1).squeeze()\n",
    "\n",
    "    sim_1d=sim_1d[mask]\n",
    "    # print(obs_1d.shape)\n",
    "    # print(sim_1d.shape)\n",
    "    \n",
    "    return obs_1d,sim_1d\n",
    "\n",
    "def cal_metrcis(ds_obs,ds_sim):\n",
    "    \n",
    "    ds_obs_1d,ds_sim_1d=xr_to_1d(ds_obs,ds_sim)\n",
    "    dm_df=hym.dm(ds_sim_1d,ds_obs_1d)\n",
    "\n",
    "\n",
    "    metrics=(\n",
    "    'MAE='+str(dm_df['MAE'])+' mm'+\n",
    "    '\\n'+'RMSE='+str(dm_df['rmse'])+' mm'+\n",
    "    '\\n'+'Bias='+str(dm_df['bias'])+' mm'+\n",
    "    # '\\n'+'CC='+str(ms_value['CC'])+\n",
    "    '\\n'+'KGE='+str(dm_df['kge'])+\n",
    "    '\\n'+'POD='+str(dm_df['pod'])+\n",
    "    '\\n'+'FAR='+str(dm_df['far'])+\n",
    "    '\\n'+'CSI='+str(dm_df['csi'])\n",
    "    )\n",
    "    print(metrics)\n",
    "\n",
    "#wrf \n",
    "cal_metrcis(ds_gauge,points_wrf)\n",
    "cal_metrcis(ds_gauge,points_nosa_predwrf)\n",
    "cal_metrcis(ds_gauge,points_sa_predwrf)\n",
    "\n",
    "#gpm\n",
    "cal_metrcis(ds_gauge,points_gpm)\n",
    "cal_metrcis(ds_gauge,points_nosa_predgpm)\n",
    "cal_metrcis(ds_gauge,points_sa_predgpm)\n",
    "\n",
    "#era5-land\n",
    "cal_metrcis(ds_gauge,points_era5)\n",
    "cal_metrcis(ds_gauge,points_nosa_predera5)\n",
    "cal_metrcis(ds_gauge,points_sa_predera5)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def select_thre(gauge,wrf,gpm,era5):\n",
    "    ts=0\n",
    "    mask=gauge>=ts\n",
    "\n",
    "    gauge_drop=gauge.where(mask,drop=True)\n",
    "\n",
    "    wrf_drop=wrf.where(mask,drop=True)\n",
    "\n",
    "    gpm_drop=gpm.where(mask,drop=True)\n",
    "\n",
    "    era5_drop=era5.where(mask,drop=True)\n",
    "\n",
    "    return gauge_drop, wrf_drop, gpm_drop, era5_drop\n",
    "\n",
    "def cal_bias(sim,obs):\n",
    "\n",
    "    bias=np.mean(sim-obs)\n",
    "\n",
    "    return bias\n",
    "\n",
    "def plot_scatter(sim,obs,dm_df,cm_df,index,ub,ax,xlabel,ms_value):\n",
    "\n",
    "    if index==0:\n",
    "        unit='mm/h'\n",
    "    if index==1:\n",
    "        unit='mm/d'\n",
    "    # df = pd.concat([obs,sim], axis=1) # concatenate the two data along columns\n",
    "    # df.columns = ['Rain Gauges', 'WRF'] # rename the columns\n",
    "    # df.plot(x='Rain Gauges', y='WRF', kind='scatter') # plot a scatter plot with x as obs and y as sim\n",
    "\n",
    "    xy = np.vstack([obs,sim])\n",
    "    z = gaussian_kde(xy)(xy)\n",
    "    # ax.scatter(obs,sim,color='blue',alpha=0.1,s=5)\n",
    "    scatter=ax.scatter(obs, sim, c=z, s=3, cmap='jet', edgecolor='none',vmin=0,vmax=0.01)  # 修改此处，将edgecolor设为'none'\n",
    "\n",
    "    # a=ax.scatter_density(obs.flatten(),sim.flatten(), cmap=coolwarm_white,vmin=0, vmax=10)\n",
    "    # # 计算趋势线\n",
    "    # z = np.polyfit(obs, sim, 1)  # 一次多项式拟合\n",
    "    # p = np.poly1d(z)\n",
    "    \n",
    "    # ax.plot(obs,p(obs),\"k--\", label='Trend line')\n",
    "\n",
    "    ax.plot([0,ub], [0,ub], color='k',linewidth=0.5) # plot a red line with slope 1 and intercept 0\n",
    "    ax.set_xlim([0,ub])\n",
    "    ax.set_ylim([0,ub])\n",
    "    # ax.set_xlabel('Gauge '+unit)\n",
    "    # ax.set_ylabel(xlabel+\" \"+unit)\n",
    "    bias=cal_bias(sim,obs)\n",
    "    bias=\"{:.2f}\".format(bias)\n",
    "    metrics=(\n",
    "        'MAE='+str(ms_value['MAE'])+' mm'+\n",
    "        '\\n'+'RMSE='+str(ms_value['RMSE'])+' mm'+\n",
    "        '\\n'+'Bias='+str(ms_value['Bias'])+' mm'+\n",
    "        # '\\n'+'CC='+str(ms_value['CC'])+\n",
    "        '\\n'+'KGE='+str(ms_value['KGE'])+\n",
    "        '\\n'+'POD='+str(ms_value['POD'])+\n",
    "        '\\n'+'FAR='+str(ms_value['FAR'])+\n",
    "        '\\n'+'CSI='+str(ms_value['CSI'])\n",
    "    )\n",
    "\n",
    "    # metrics=(\n",
    "    #             'KGE='+str(dm_df['kge'].values[0])+\n",
    "    #           '\\n' + 'CC='+str(dm_df['r'].values[0])+\n",
    "    #          '\\n'+'RMSE='+str(dm_df['rmse'].values[0])+\n",
    "    #         #  '\\n'+'ME='+str(dm_df['me'].values[0])+\n",
    "    #          '\\n'+'MAE='+str(dm_df['mae'].values[0])+\n",
    "    #          '\\n'+'BIAS='+str(dm_df['bias'].values[0])+\n",
    "    #          '\\n' +'POD='+str(cm_df['pod'].values[0])+\n",
    "    #         #  '\\n'+'MR='+str(cm_df['mr'].values[0])+\n",
    "    #          '\\n'+'FAR='+str(cm_df['far'].values[0])+\n",
    "    #          '\\n'+'CSI='+str(cm_df['ts'].values[0])\n",
    "    # )   \n",
    "    \n",
    "    ax.text(0.38, 0.30, metrics, transform=ax.transAxes,fontsize=6) \n",
    "    return scatter\n",
    "    \n",
    "def plot_timeseris(sim,obs,time,index,ax):\n",
    "    if index==0:\n",
    "        unit='mm/h'\n",
    "    if index==1:\n",
    "        unit='mm/d'\n",
    "    ax.plot(time,obs,color='r',label='Obs.')\n",
    "    ax.plot(time,sim,color='b',label='Sim.')\n",
    "    \n",
    "    ax.tick_params(axis='x', labelrotation=45)\n",
    "    ax.xaxis.set_major_locator(mdates.DayLocator(1))\n",
    "    ax.set_ylabel(unit)\n",
    "\n",
    "def xr_to_npmean(ds,index):\n",
    "    #index=0->hour\n",
    "    ds_mean=ds.mean(dim='loc')\n",
    "\n",
    "    if index==0:\n",
    "        dss=ds_mean['tp']\n",
    "\n",
    "    return (ds_out,xtime)\n",
    "\n",
    "def xr_to_1d(obs,sim):\n",
    "    ts=0\n",
    "    obs_1d=obs.tp.values.reshape(-1).squeeze()\n",
    "    # Find non-empty values in A\n",
    "    mask = obs_1d>=ts\n",
    "\n",
    "    obs_1d=obs_1d[mask]\n",
    "\n",
    "    sim_1d=sim.tp.values.reshape(-1).squeeze()\n",
    "\n",
    "    sim_1d=sim_1d[mask]\n",
    "    # print(obs_1d.shape)\n",
    "    # print(sim_1d.shape)\n",
    "    \n",
    "    return obs_1d,sim_1d\n",
    "\n",
    "def ds_plot(ds_obs,ds_sim,index,type,ub,ax,xlabel,ms_value):\n",
    "\n",
    "    #type=0 -> plot scatter\n",
    "    #type=1-> plot line\n",
    "\n",
    "    ds_obs_1d,ds_sim_1d=xr_to_1d(ds_obs,ds_sim)\n",
    "    \n",
    "    if type==0:\n",
    "        dm_df=hym.dm(ds_sim_1d,ds_obs_1d)\n",
    "        \n",
    "        cm_df=hym.cal_category_m(ds_sim_1d,ds_obs_1d,threshold=1)\n",
    "        scatter=plot_scatter(ds_sim_1d,ds_obs_1d,dm_df,cm_df,index,ub,ax,xlabel,ms_value)\n",
    "    return scatter\n",
    "\n",
    "params={'font.family':'serif',\n",
    "\t\n",
    "'font.serif':'Arial',\n",
    "'font.style':'normal', #normal\n",
    "'font.weight':'normal',#or'bold,\n",
    "'font.size':8,\n",
    "\n",
    "# 'ytick.major.left': True,\n",
    "\"ytick.direction\": \"in\",  # direction: in, out, or inout\n",
    "\"xtick.direction\": \"in\",  # direction: in, out, or inout\n",
    "#\n",
    "# \"ytick.minor.visible\": True,  # visibility of minor ticks on y-axis\n",
    "# \"xtick.minor.visible\": True,  # visibility of minor ticks on y-axis\n",
    "            }\n",
    "\n",
    "mpl.rcParams['lines.linewidth'] = 1.5  #绘制线条\n",
    "mpl.rcParams['axes.linewidth']=0.75   #axes width\n",
    "# mpl.rcParams['xtick.major.size'] = 5\n",
    "# mpl.rcParams['ytick.major.size'] = 5\n",
    "#\n",
    "# mpl.rcParams['xtick.minor.size'] = 2\n",
    "# mpl.rcParams['ytick.minor.size'] = 2\n",
    "\n",
    "# 设置 xticks 和 yticks 的字体大小为 7\n",
    "plt.rcParams['xtick.labelsize'] = 7\n",
    "plt.rcParams['ytick.labelsize'] = 7\n",
    "\n",
    "rcParams.update(params)\n",
    "\n",
    "pos_l,pos_r=0.05,0.95\n",
    "fig = plt.figure(figsize=(4.5,4),\n",
    "                 )\n",
    "# plt.rcParams['font.family'] = 'Arial'\n",
    "umax=45\n",
    "#WRF\n",
    "xlabel=''\n",
    "ax1 = fig.add_subplot(3, 3,1, projection='scatter_density')\n",
    "ax1.text(pos_l, pos_r, '(a)', transform=ax1.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_wrf,index=1,type=0,ub=umax,ax=ax1,xlabel=xlabel,ms_value=ms_wrf['Raw'])\n",
    "\n",
    "ax1.text(-0.38, 0.5, 'WRF-9km', transform=ax1.transAxes, \n",
    "        ha='center', va='center', rotation=90,fontsize=9,fontweight='bold')\n",
    "\n",
    "ax1.set_ylabel('Estimates (mm/d)')\n",
    "\n",
    "ax1.set_title('Raw',fontsize=9,fontweight='bold')\n",
    "\n",
    "####\n",
    "xlabel=''\n",
    "ax = fig.add_subplot(3, 3,2, projection='scatter_density')\n",
    "\n",
    "ax.text(pos_l, pos_r, '(b)', transform=ax.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_nosa_predwrf,index=1,type=0,ub=umax,ax=ax,xlabel=xlabel,ms_value=ms_wrf['Baseline'])\n",
    "\n",
    "ax.set_title('Baseline',fontsize=9,fontweight='bold')\n",
    "\n",
    "# ax.set_ylabel('mm/d')\n",
    "\n",
    "xlabel=''\n",
    "ax = fig.add_subplot(3, 3,3, projection='scatter_density')\n",
    "\n",
    "ax.text(pos_l, pos_r, '(c)', transform=ax.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_sa_predwrf,index=1,type=0,ub=umax,ax=ax,xlabel=xlabel,ms_value=ms_wrf['HPDNet'])\n",
    "\n",
    "ax.set_title('HRDNet',fontsize=9,fontweight='bold')\n",
    "\n",
    "# ax.set_xlabel('Gauge (mm/d)')\n",
    "# ax.set_ylabel('mm/d')\n",
    "\n",
    "#ERA5\n",
    "xlabel=''\n",
    "ax2 = fig.add_subplot(3, 3,4, projection='scatter_density')\n",
    "scatter=ds_plot(ds_gauge,points_era5,index=1,type=0,ub=umax,ax=ax2,xlabel=xlabel,ms_value=ms_era5['Raw']) #hour  \n",
    "ax2.text(pos_l, pos_r, '(d)', transform=ax2.transAxes, fontsize=8, verticalalignment='top')\n",
    "\n",
    "ax2.text(-0.38, 0.5, 'ERA5-Land', transform=ax2.transAxes, \n",
    "        ha='center', va='center', rotation=90,fontsize=9,fontweight='bold')\n",
    "\n",
    "# ax2.set_title('ERA5-Land',fontsize=9,fontweight='bold')\n",
    "ax2.set_ylabel('Estimates (mm/d)')\n",
    "\n",
    "####\n",
    "xlabel=''\n",
    "ax = fig.add_subplot(3, 3,5, projection='scatter_density')\n",
    "\n",
    "ax.text(pos_l, pos_r, '(e)', transform=ax.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_nosa_predera5,index=1,type=0,ub=umax,ax=ax,xlabel=xlabel,ms_value=ms_era5['Baseline'])\n",
    "\n",
    "####\n",
    "xlabel=''\n",
    "ax = fig.add_subplot(3, 3,6, projection='scatter_density')\n",
    "\n",
    "ax.text(pos_l, pos_r, '(f)', transform=ax.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_sa_predera5,index=1,type=0,ub=umax,ax=ax,xlabel=xlabel,ms_value=ms_era5['HPDNet'])\n",
    "# ax.set_xlabel('Gauge (mm/d)')\n",
    "\n",
    "#GPM\n",
    "xlabel=''\n",
    "\n",
    "ax3 = fig.add_subplot(3, 3,7, projection='scatter_density')\n",
    "scatter=ds_plot(ds_gauge,points_gpm,index=1,type=0,ub=umax,ax=ax3,xlabel=xlabel,ms_value=ms_gpm['Raw'])\n",
    "\n",
    "ax3.text(pos_l, pos_r, '(g)', transform=ax3.transAxes, fontsize=8, verticalalignment='top')\n",
    "\n",
    "ax3.text(-0.38, 0.5, 'IMERG', transform=ax3.transAxes, \n",
    "        ha='center', va='center', rotation=90,fontsize=9,fontweight='bold')\n",
    "\n",
    "ax3.set_xlabel('Gauge (mm/d)')\n",
    "ax3.set_ylabel('Estimates (mm/d)')\n",
    "# ax3.set_title('IMERG',fontsize=9,fontweight='bold')\n",
    "\n",
    "####\n",
    "xlabel=''\n",
    "ax = fig.add_subplot(3, 3,8, projection='scatter_density')\n",
    "\n",
    "ax.text(pos_l, pos_r, '(h)', transform=ax.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_nosa_predgpm,index=1,type=0,ub=umax,ax=ax,xlabel=xlabel,ms_value=ms_gpm['Baseline'])\n",
    "ax.set_xlabel('Gauge (mm/d)')\n",
    "#\n",
    "xlabel=''\n",
    "ax = fig.add_subplot(3, 3,9, projection='scatter_density')\n",
    "\n",
    "ax.text(pos_l, pos_r, '(i)', transform=ax.transAxes, fontsize=8, verticalalignment='top')\n",
    "scatter=ds_plot(ds_gauge,points_sa_predgpm,index=1,type=0,ub=umax,ax=ax,xlabel=xlabel,ms_value=ms_gpm['HPDNet'])\n",
    "\n",
    "# 参数分别是 [left, bottom, width, height]，在图形右侧\n",
    "cax = plt.axes([0.93, 0.15, 0.02, 0.68])  # 注意这些值需要根据你图形的具体布局来调整\n",
    "\n",
    "# 添加colorbar到指定的位置，指定为垂直方向\n",
    "cbar = plt.colorbar(scatter, cax=cax, orientation='vertical')\n",
    "\n",
    "# 设置colorbar的标题，这里就是添加标签（label）\n",
    "cbar.ax.set_title('Density', pad=5,fontsize=7)\n",
    "\n",
    "ax.set_xlabel('Gauge (mm/d)')\n",
    "\n",
    "plt.subplots_adjust(wspace=0.25,hspace=0.25)\n",
    "\n",
    "# plt.tight_layout(pad=0.5)\n",
    "plt.savefig('d04—1vs1-0816-density.jpg',dpi=600,bbox_inches='tight')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
